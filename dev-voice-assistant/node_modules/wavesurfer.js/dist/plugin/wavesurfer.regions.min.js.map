{"version":3,"sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/./src/plugin/regions/index.js","webpack://WaveSurfer.[name]/./src/plugin/regions/region.js","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/webpack/startup"],"names":["root","factory","exports","module","define","amd","this","RegionsPlugin","params","ws","wavesurfer","util","getRegionSnapToGridValue","value","maxRegions","regionsMinLength","Object","getOwnPropertyNames","Observer","prototype","forEach","key","Region","_onBackendCreated","wrapper","drawer","regions","region","edgeScrollWidth","clientWidth","add","list","_onReady","dragSelection","enableDragSelection","keys","id","updateRender","name","deferInit","staticProps","addRegion","options","initialisedPluginList","initPlugin","clearRegions","clear","disableDragSelection","instance","isReady","once","un","length","wouldExceedMaxRegions","minLength","on","remove","drag","maxScroll","start","touchId","scrollDirection","wrapperRect","slop","container","scroll","scrollParent","scrollSpeed","scrollThreshold","duration","getDuration","pxMove","edgeScroll","e","scrollLeft","Math","min","max","end","handleEvent","update","window","requestAnimationFrame","eventDown","touches","targetTouches","identifier","scrollWidth","getBoundingClientRect","addEventListener","removeEventListener","eventUp","preventClick","fireEvent","document","body","eventMove","startUpdate","endUpdate","x","clientX","left","right","time","getCurrentTime","cur","snapToGridInterval","offset","snapToGridOffset","round","regionsUtils","style","regionsUtil","getId","Number","resize","undefined","Boolean","isResizing","isDragging","loop","color","handleStyle","handleLeftEl","handleRightEl","data","attributes","maxLength","_onRedraw","preventContextMenu","channelIdx","parseInt","regionHeight","marginTop","channelCount","backend","buffer","numberOfChannels","floor","getHeight","formatTimeCallback","bindInOut","render","updateHandlesResize","element","removeChild","s","play","regionEl","createElement","attrname","className","title","formatTime","setAttribute","position","zIndex","height","top","appendChild","css","cursor","width","backgroundColor","handleLeftCss","assign","handleRightCss","bindEvents","map","slice","join","pixelRatio","dur","getWidth","startLimited","endLimited","regionWidth","firedIn","firedOut","onProcess","realTime","preventDefault","stopPropagation","bindDragEvents","startTime","regionLeftHalfTime","regionRightHalfTime","updated","distanceBetweenCursorAndWrapperEdge","regionHalfTimeWidth","adjustment","minPxPerSec","calculatedLeft","calculatedRight","delta","onDrag","onResize","onDown","target","tagName","toLowerCase","classList","contains","onUp","onMove","maxEnd","direction","cursorStyle","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"wavesurfer.regions.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"regions\"] = factory();\n})(this, function() {\nreturn ","/**\n *  @since 4.0.0 This class has been split\n *\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging with\n * the mouse\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\n * @property {?boolean} deferInit Set to true to manually call\n * @property {number[]} maxRegions Maximum number of regions that may be created by the user at one time.\n * `initPlugin('regions')`\n * @property {function} formatTimeCallback Allows custom formating for region tooltip.\n * @property {?number} edgeScrollWidth='5% from container edges' Optional width for edgeScroll to start\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=→random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/disallow dragging the region.\n * @property {boolean} resize=true Allow/disallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n * @property {?number} channelIdx Select channel to draw the region on (if there are multiple channel waveforms).\n * @property {?object} handleStyle A set of CSS properties used to style the left and right handle.\n * @property {?boolean} preventContextMenu=false Determines whether the context menu is prevented from being opened.\n */\n\nimport {Region} from \"./region.js\";\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class RegionsPlugin {\n    /**\n     * Regions plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'regions',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                addRegion(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    return this.regions.add(options);\n                },\n\n                clearRegions() {\n                    this.regions && this.regions.clear();\n                },\n\n                enableDragSelection(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    this.regions.enableDragSelection(options);\n                },\n\n                disableDragSelection() {\n                    this.regions.disableDragSelection();\n                }\n            },\n            instance: RegionsPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = {\n            ...ws.util,\n            getRegionSnapToGridValue: value => {\n                return this.getRegionSnapToGridValue(value, params);\n            }\n        };\n        this.maxRegions = params.maxRegions;\n        this.regionsMinLength = params.regionsMinLength || null;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            this.util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Region.prototype[key] = this.util.Observer.prototype[key];\n        });\n        this.wavesurfer.Region = Region;\n\n        this._onBackendCreated = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            if (this.params.regions) {\n                this.params.regions.forEach(region => {\n                    region.edgeScrollWidth = this.params.edgeScrollWidth || this.wrapper.clientWidth * 0.05;\n                    this.add(region);\n                });\n            }\n        };\n\n        // Id-based hash of regions\n        this.list = {};\n        this._onReady = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            if (this.params.dragSelection) {\n                this.enableDragSelection(this.params);\n            }\n            Object.keys(this.list).forEach(id => {\n                this.list[id].updateRender();\n            });\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onBackendCreated();\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\n        }\n    }\n\n    destroy() {\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\n        this.disableDragSelection();\n        this.clear();\n    }\n\n    /**\n     * check to see if adding a new region would exceed maxRegions\n     * @return {boolean} whether we should proceed and create a region\n     * @private\n     */\n    wouldExceedMaxRegions() {\n        return (\n            this.maxRegions && Object.keys(this.list).length >= this.maxRegions\n        );\n    }\n\n    /**\n     * Add a region\n     *\n     * @param {object} params Region parameters\n     * @return {Region} The created region\n     */\n    add(params) {\n        if (this.wouldExceedMaxRegions()) return null;\n\n        if (!params.minLength && this.regionsMinLength) {\n            params = {...params, minLength: this.regionsMinLength};\n        }\n\n        const region = new this.wavesurfer.Region(params, this.util, this.wavesurfer);\n\n        this.list[region.id] = region;\n\n        region.on('remove', () => {\n            delete this.list[region.id];\n        });\n\n        return region;\n    }\n\n    /**\n     * Remove all regions\n     */\n    clear() {\n        Object.keys(this.list).forEach(id => {\n            this.list[id].remove();\n        });\n    }\n\n    enableDragSelection(params) {\n        this.disableDragSelection();\n\n        const slop = params.slop || 2;\n        const container = this.wavesurfer.drawer.container;\n        const scroll =\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\n        const scrollSpeed = params.scrollSpeed || 1;\n        const scrollThreshold = params.scrollThreshold || 10;\n        let drag;\n        let duration = this.wavesurfer.getDuration();\n        let maxScroll;\n        let start;\n        let region;\n        let touchId;\n        let pxMove = 0;\n        let scrollDirection;\n        let wrapperRect;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = e => {\n            if (!region || !scrollDirection) {\n                return;\n            }\n\n            // Update scroll position\n            let scrollLeft =\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\n                maxScroll,\n                Math.max(0, scrollLeft)\n            );\n\n            // Update range\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            region.update({\n                start: Math.min(end * duration, start * duration),\n                end: Math.max(end * duration, start * duration)\n            });\n\n            // Check that there is more to scroll and repeat\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\n                window.requestAnimationFrame(() => {\n                    edgeScroll(e);\n                });\n            }\n        };\n\n        const eventDown = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            duration = this.wavesurfer.getDuration();\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n            wrapperRect = this.wrapper.getBoundingClientRect();\n\n            drag = true;\n            start = this.wavesurfer.drawer.handleEvent(e, true);\n            region = null;\n            scrollDirection = null;\n        };\n        this.wrapper.addEventListener('mousedown', eventDown);\n        this.wrapper.addEventListener('touchstart', eventDown);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchstart', eventDown);\n            this.wrapper.removeEventListener('mousedown', eventDown);\n        });\n\n        const eventUp = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            drag = false;\n            pxMove = 0;\n            scrollDirection = null;\n\n            if (region) {\n                this.util.preventClick();\n                region.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', region, e);\n            }\n\n            region = null;\n        };\n        this.wrapper.addEventListener('mouseleave', eventUp);\n        this.wrapper.addEventListener('mouseup', eventUp);\n        this.wrapper.addEventListener('touchend', eventUp);\n\n        document.body.addEventListener('mouseup', eventUp);\n        document.body.addEventListener('touchend', eventUp);\n        this.on('disable-drag-selection', () => {\n            document.body.removeEventListener('mouseup', eventUp);\n            document.body.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('mouseup', eventUp);\n            this.wrapper.removeEventListener('mouseleave', eventUp);\n        });\n\n        const eventMove = e => {\n            if (!drag) {\n                return;\n            }\n            if (++pxMove <= slop) {\n                return;\n            }\n\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            if (e.targetTouches && e.targetTouches[0].identifier != touchId) {\n                return;\n            }\n\n            // auto-create a region during mouse drag, unless region-count would exceed \"maxRegions\"\n            if (!region) {\n                region = this.add(params || {});\n                if (!region) return;\n            }\n\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                start * duration\n            );\n            const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                end * duration\n            );\n            region.update({\n                start: Math.min(endUpdate, startUpdate),\n                end: Math.max(endUpdate, startUpdate)\n            });\n\n            // If scrolling is enabled\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\n                // Check threshold based on mouse\n                const x = e.clientX - wrapperRect.left;\n                if (x <= scrollThreshold) {\n                    scrollDirection = -1;\n                } else if (x >= wrapperRect.right - scrollThreshold) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n                scrollDirection && edgeScroll(e);\n            }\n        };\n        this.wrapper.addEventListener('mousemove', eventMove);\n        this.wrapper.addEventListener('touchmove', eventMove);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchmove', eventMove);\n            this.wrapper.removeEventListener('mousemove', eventMove);\n        });\n\n        this.wavesurfer.on('region-created', region => {\n            if (this.regionsMinLength) {\n                region.minLength = this.regionsMinLength;\n            }\n        });\n    }\n\n    disableDragSelection() {\n        this.fireEvent('disable-drag-selection');\n    }\n\n    /**\n     * Get current region\n     *\n     * The smallest region that contains the current time. If several such\n     * regions exist, take the first. Return `null` if none exist.\n     *\n     * @returns {Region} The current region\n     */\n    getCurrentRegion() {\n        const time = this.wavesurfer.getCurrentTime();\n        let min = null;\n        Object.keys(this.list).forEach(id => {\n            const cur = this.list[id];\n            if (cur.start <= time && cur.end >= time) {\n                if (!min || cur.end - cur.start < min.end - min.start) {\n                    min = cur;\n                }\n            }\n        });\n\n        return min;\n    }\n\n    /**\n     * Match the value to the grid, if required\n     *\n     * If the regions plugin params have a snapToGridInterval set, return the\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\n     * the passed value will be returned without modification.\n     *\n     * @param {number} value the value to snap to the grid, if needed\n     * @param {Object} params the regions plugin params\n     * @returns {number} value\n     */\n    getRegionSnapToGridValue(value, params) {\n        if (params.snapToGridInterval) {\n            // the regions should snap to a grid\n            const offset = params.snapToGridOffset || 0;\n            return (\n                Math.round((value - offset) / params.snapToGridInterval) *\n                    params.snapToGridInterval +\n                offset\n            );\n        }\n\n        // no snap-to-grid\n        return value;\n    }\n}\n","/**\n *  @since 4.0.0\n *\n * (Single) Region plugin class\n *\n * Must be turned into an observer before instantiating. This is done in\n * `RegionsPlugin` (main plugin class).\n *\n * @extends {Observer}\n */\nexport class Region {\n    constructor(params, regionsUtils, ws) {\n        this.wavesurfer = ws;\n        this.wrapper = ws.drawer.wrapper;\n        this.util = ws.util;\n        this.style = this.util.style;\n        this.regionsUtil = regionsUtils;\n\n        this.id = params.id == null ? ws.util.getId() : params.id;\n        this.start = Number(params.start) || 0;\n        this.end =\n            params.end == null\n                ? // small marker-like region\n                this.start +\n                (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration()\n                : Number(params.end);\n        this.resize =\n            params.resize === undefined ? true : Boolean(params.resize);\n        this.drag = params.drag === undefined ? true : Boolean(params.drag);\n        // reflect resize and drag state of region for region-updated listener\n        this.isResizing = false;\n        this.isDragging = false;\n        this.loop = Boolean(params.loop);\n        this.color = params.color || 'rgba(0, 0, 0, 0.1)';\n        // The left and right handleStyle properties can be set to 'none' for\n        // no styling or can be assigned an object containing CSS properties.\n        this.handleStyle = params.handleStyle || {\n            left: {},\n            right: {}\n        };\n        this.handleLeftEl = null;\n        this.handleRightEl = null;\n        this.data = params.data || {};\n        this.attributes = params.attributes || {};\n\n        this.maxLength = params.maxLength;\n        // It assumes the minLength parameter value, or the regionsMinLength parameter value, if the first one not provided\n        this.minLength = params.minLength;\n        this._onRedraw = () => this.updateRender();\n\n        this.scroll = params.scroll !== false && ws.params.scrollParent;\n        this.scrollSpeed = params.scrollSpeed || 1;\n        this.scrollThreshold = params.scrollThreshold || 10;\n        // Determines whether the context menu is prevented from being opened.\n        this.preventContextMenu =\n            params.preventContextMenu === undefined\n                ? false\n                : Boolean(params.preventContextMenu);\n\n        // select channel ID to set region\n        let channelIdx =\n            params.channelIdx == null ? -1 : parseInt(params.channelIdx);\n        this.regionHeight = '100%';\n        this.marginTop = '0px';\n\n        if (channelIdx !== -1) {\n            let channelCount =\n                this.wavesurfer.backend.buffer != null\n                    ? this.wavesurfer.backend.buffer.numberOfChannels\n                    : -1;\n            if (channelCount >= 0 && channelIdx < channelCount) {\n                this.regionHeight = Math.floor((1 / channelCount) * 100) + '%';\n                this.marginTop =\n                    this.wavesurfer.getHeight() * channelIdx + 'px';\n            }\n        }\n\n        this.formatTimeCallback = params.formatTimeCallback;\n        this.edgeScrollWidth = params.edgeScrollWidth;\n        this.bindInOut();\n        this.render();\n        this.wavesurfer.on('zoom', this._onRedraw);\n        this.wavesurfer.on('redraw', this._onRedraw);\n        this.wavesurfer.fireEvent('region-created', this);\n    }\n\n    /* Update region params. */\n    update(params) {\n        if (params.start != null) {\n            this.start = Number(params.start);\n        }\n        if (params.end != null) {\n            this.end = Number(params.end);\n        }\n        if (params.loop != null) {\n            this.loop = Boolean(params.loop);\n        }\n        if (params.color != null) {\n            this.color = params.color;\n        }\n        if (params.handleStyle != null) {\n            this.handleStyle = params.handleStyle;\n        }\n        if (params.data != null) {\n            this.data = params.data;\n        }\n        if (params.resize != null) {\n            this.resize = Boolean(params.resize);\n            this.updateHandlesResize(this.resize);\n        }\n        if (params.drag != null) {\n            this.drag = Boolean(params.drag);\n        }\n        if (params.maxLength != null) {\n            this.maxLength = Number(params.maxLength);\n        }\n        if (params.minLength != null) {\n            this.minLength = Number(params.minLength);\n        }\n        if (params.attributes != null) {\n            this.attributes = params.attributes;\n        }\n\n        this.updateRender();\n        this.fireEvent('update');\n        this.wavesurfer.fireEvent('region-updated', this);\n    }\n\n    /* Remove a single region. */\n    remove() {\n        if (this.element) {\n            this.wrapper.removeChild(this.element);\n            this.element = null;\n            this.fireEvent('remove');\n            this.wavesurfer.un('zoom', this._onRedraw);\n            this.wavesurfer.un('redraw', this._onRedraw);\n            this.wavesurfer.fireEvent('region-removed', this);\n        }\n    }\n\n    /**\n     * Play the audio region.\n     * @param {number} start Optional offset to start playing at\n     */\n    play(start) {\n        const s = start || this.start;\n        this.wavesurfer.play(s, this.end);\n        this.fireEvent('play');\n        this.wavesurfer.fireEvent('region-play', this);\n    }\n\n    /**\n     * Play the audio region in a loop.\n     * @param {number} start Optional offset to start playing at\n     * */\n    playLoop(start) {\n        this.loop = true;\n        this.play(start);\n    }\n\n    /**\n     * Set looping on/off.\n     * @param {boolean} loop True if should play in loop\n     */\n    setLoop(loop) {\n        this.loop = loop;\n    }\n\n    /* Render a region as a DOM element. */\n    render() {\n        const regionEl = document.createElement('region');\n\n        regionEl.className = 'wavesurfer-region';\n        regionEl.title = this.formatTime(this.start, this.end);\n        regionEl.setAttribute('data-id', this.id);\n\n        for (const attrname in this.attributes) {\n            regionEl.setAttribute(\n                'data-region-' + attrname,\n                this.attributes[attrname]\n            );\n        }\n\n        this.style(regionEl, {\n            position: 'absolute',\n            zIndex: 2,\n            height: this.regionHeight,\n            top: this.marginTop\n        });\n\n        /* Resize handles */\n        if (this.resize) {\n            this.handleLeftEl = regionEl.appendChild(\n                document.createElement('handle')\n            );\n            this.handleRightEl = regionEl.appendChild(\n                document.createElement('handle')\n            );\n\n            this.handleLeftEl.className = 'wavesurfer-handle wavesurfer-handle-start';\n            this.handleRightEl.className = 'wavesurfer-handle wavesurfer-handle-end';\n\n            // Default CSS properties for both handles.\n            const css = {\n                cursor: 'col-resize',\n                position: 'absolute',\n                top: '0px',\n                width: '2px',\n                height: '100%',\n                backgroundColor: 'rgba(0, 0, 0, 1)'\n            };\n\n            // Merge CSS properties per handle.\n            const handleLeftCss =\n                this.handleStyle.left !== 'none'\n                    ? Object.assign({ left: '0px' }, css, this.handleStyle.left)\n                    : null;\n            const handleRightCss =\n                this.handleStyle.right !== 'none'\n                    ? Object.assign(\n                        { right: '0px' },\n                        css,\n                        this.handleStyle.right\n                    )\n                    : null;\n\n            if (handleLeftCss) {\n                this.style(this.handleLeftEl, handleLeftCss);\n            }\n\n            if (handleRightCss) {\n                this.style(this.handleRightEl, handleRightCss);\n            }\n        }\n\n        this.element = this.wrapper.appendChild(regionEl);\n        this.updateRender();\n        this.bindEvents(regionEl);\n    }\n\n    formatTime(start, end) {\n        if (this.formatTimeCallback) {\n            return this.formatTimeCallback(start, end);\n        }\n        return (start == end ? [start] : [start, end])\n            .map((time) =>\n                [\n                    Math.floor((time % 3600) / 60), // minutes\n                    ('00' + Math.floor(time % 60)).slice(-2) // seconds\n                ].join(':')\n            )\n            .join('-');\n    }\n\n    getWidth() {\n        return this.wavesurfer.drawer.width / this.wavesurfer.params.pixelRatio;\n    }\n\n    /* Update element's position, width, color. */\n    updateRender() {\n        // duration varies during loading process, so don't overwrite important data\n        const dur = this.wavesurfer.getDuration();\n        const width = this.getWidth();\n\n        let startLimited = this.start;\n        let endLimited = this.end;\n        if (startLimited < 0) {\n            startLimited = 0;\n            endLimited = endLimited - startLimited;\n        }\n        if (endLimited > dur) {\n            endLimited = dur;\n            startLimited = dur - (endLimited - startLimited);\n        }\n\n        if (this.minLength != null) {\n            endLimited = Math.max(startLimited + this.minLength, endLimited);\n        }\n\n        if (this.maxLength != null) {\n            endLimited = Math.min(startLimited + this.maxLength, endLimited);\n        }\n\n        if (this.element != null) {\n            // Calculate the left and width values of the region such that\n            // no gaps appear between regions.\n            const left = Math.round((startLimited / dur) * width);\n            const regionWidth = Math.round((endLimited / dur) * width) - left;\n\n            this.style(this.element, {\n                left: left + 'px',\n                width: regionWidth + 'px',\n                backgroundColor: this.color,\n                cursor: this.drag ? 'move' : 'default'\n            });\n\n            for (const attrname in this.attributes) {\n                this.element.setAttribute(\n                    'data-region-' + attrname,\n                    this.attributes[attrname]\n                );\n            }\n\n            this.element.title = this.formatTime(this.start, this.end);\n        }\n    }\n\n    /* Bind audio events. */\n    bindInOut() {\n        this.firedIn = false;\n        this.firedOut = false;\n\n        const onProcess = (time) => {\n            let start = Math.round(this.start * 10) / 10;\n            let end = Math.round(this.end * 10) / 10;\n            time = Math.round(time * 10) / 10;\n\n            if (\n                !this.firedOut &&\n                this.firedIn &&\n                (start > time || end <= time)\n            ) {\n                this.firedOut = true;\n                this.firedIn = false;\n                this.fireEvent('out');\n                this.wavesurfer.fireEvent('region-out', this);\n            }\n            if (!this.firedIn && start <= time && end > time) {\n                this.firedIn = true;\n                this.firedOut = false;\n                this.fireEvent('in');\n                this.wavesurfer.fireEvent('region-in', this);\n            }\n        };\n\n        this.wavesurfer.backend.on('audioprocess', onProcess);\n\n        this.on('remove', () => {\n            this.wavesurfer.backend.un('audioprocess', onProcess);\n        });\n\n        /* Loop playback. */\n        this.on('out', () => {\n            if (this.loop) {\n                const realTime = this.wavesurfer.getCurrentTime();\n                if (realTime >= this.start && realTime <= this.end) {\n                    this.wavesurfer.play(this.start);\n                }\n            }\n        });\n    }\n\n    /* Bind DOM events. */\n    bindEvents() {\n        const preventContextMenu = this.preventContextMenu;\n\n        this.element.addEventListener('mouseenter', (e) => {\n            this.fireEvent('mouseenter', e);\n            this.wavesurfer.fireEvent('region-mouseenter', this, e);\n        });\n\n        this.element.addEventListener('mouseleave', (e) => {\n            this.fireEvent('mouseleave', e);\n            this.wavesurfer.fireEvent('region-mouseleave', this, e);\n        });\n\n        this.element.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.fireEvent('click', e);\n            this.wavesurfer.fireEvent('region-click', this, e);\n        });\n\n        this.element.addEventListener('dblclick', (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.fireEvent('dblclick', e);\n            this.wavesurfer.fireEvent('region-dblclick', this, e);\n        });\n\n        this.element.addEventListener('contextmenu', (e) => {\n            if (preventContextMenu) {\n                e.preventDefault();\n            }\n            this.fireEvent('contextmenu', e);\n            this.wavesurfer.fireEvent('region-contextmenu', this, e);\n        });\n\n        /* Drag or resize on mousemove. */\n        if (this.drag || this.resize) {\n            this.bindDragEvents();\n        }\n    }\n\n    bindDragEvents() {\n        const container = this.wavesurfer.drawer.container;\n        const scrollSpeed = this.scrollSpeed;\n        const scrollThreshold = this.scrollThreshold;\n        let startTime;\n        let touchId;\n        let drag;\n        let maxScroll;\n        let resize;\n        let updated = false;\n        let scrollDirection;\n        let wrapperRect;\n        let regionLeftHalfTime;\n        let regionRightHalfTime;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = (e) => {\n            const duration = this.wavesurfer.getDuration();\n            if (!scrollDirection || (!drag && !resize)) {\n                return;\n            }\n\n            const x = e.clientX;\n            let distanceBetweenCursorAndWrapperEdge = 0;\n            let regionHalfTimeWidth = 0;\n            let adjustment = 0;\n\n            // Get the currently selected time according to the mouse position\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(e) * duration\n            );\n\n            if (drag) {\n                // Considering the point of contact with the region while edgescrolling\n                if (scrollDirection === -1) {\n                    regionHalfTimeWidth = regionLeftHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = x - wrapperRect.left;\n                } else {\n                    regionHalfTimeWidth = regionRightHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = wrapperRect.right - x;\n                }\n            } else {\n                // Considering minLength while edgescroll\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            // Don't edgescroll if region has reached min or max limit\n            if (scrollDirection === -1) {\n                if (Math.round(this.wrapper.scrollLeft) === 0) {\n                    return;\n                }\n\n                if (Math.round(this.wrapper.scrollLeft - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge) <= 0) {\n                    return;\n                }\n            } else {\n                if (Math.round(this.wrapper.scrollLeft) === maxScroll) {\n                    return;\n                }\n\n                if (Math.round(this.wrapper.scrollLeft + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge) >= maxScroll) {\n                    return;\n                }\n            }\n\n            // Update scroll position\n            let scrollLeft = this.wrapper.scrollLeft - adjustment + scrollSpeed * scrollDirection;\n\n            if (scrollDirection === -1) {\n                const calculatedLeft = Math.max(0 + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedLeft;\n            } else {\n                const calculatedRight = Math.min(maxScroll - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedRight;\n            }\n\n            const delta = time - startTime;\n            startTime = time;\n\n            // Continue dragging or resizing\n            drag ? this.onDrag(delta) : this.onResize(delta, resize);\n\n            // Repeat\n            window.requestAnimationFrame(() => {\n                edgeScroll(e);\n            });\n        };\n\n        const onDown = (e) => {\n            const duration = this.wavesurfer.getDuration();\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // stop the event propagation, if this region is resizable or draggable\n            // and the event is therefore handled here.\n            if (this.drag || this.resize) {\n                e.stopPropagation();\n            }\n\n            // Store the selected startTime we begun dragging or resizing\n            startTime = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(e, true) * duration\n            );\n\n            // Store the selected point of contact when we begin dragging\n            regionLeftHalfTime = startTime - this.start;\n            regionRightHalfTime = this.end - startTime;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n            wrapperRect = this.wrapper.getBoundingClientRect();\n\n            this.isResizing = false;\n            this.isDragging = false;\n            if (e.target.tagName.toLowerCase() === 'handle') {\n                this.isResizing = true;\n                resize = e.target.classList.contains('wavesurfer-handle-start')\n                    ? 'start'\n                    : 'end';\n            } else {\n                this.isDragging = true;\n                drag = true;\n                resize = false;\n            }\n        };\n        const onUp = (e) => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            if (drag || resize) {\n                this.isDragging = false;\n                this.isResizing = false;\n                drag = false;\n                scrollDirection = null;\n                resize = false;\n            }\n\n            if (updated) {\n                updated = false;\n                this.util.preventClick();\n                this.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', this, e);\n            }\n        };\n        const onMove = (e) => {\n            const duration = this.wavesurfer.getDuration();\n\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            if (e.targetTouches && e.targetTouches[0].identifier != touchId) {\n                return;\n            }\n            if (!drag && !resize) {\n                return;\n            }\n\n            const oldTime = startTime;\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(e) * duration\n            );\n\n            if (drag) {\n                // To maintain relative cursor start point while dragging\n                const maxEnd = this.wavesurfer.getDuration();\n                if (time > maxEnd - regionRightHalfTime) {\n                    time = maxEnd - regionRightHalfTime;\n                }\n\n                if (time - regionLeftHalfTime < 0) {\n                    time = regionLeftHalfTime;\n                }\n            }\n\n            if (resize) {\n                // To maintain relative cursor start point while resizing\n                // we have to handle for minLength\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            let delta = time - startTime;\n            startTime = time;\n\n            // Drag\n            if (this.drag && drag) {\n                updated = updated || !!delta;\n                this.onDrag(delta);\n            }\n\n            // Resize\n            if (this.resize && resize) {\n                updated = updated || !!delta;\n                this.onResize(delta, resize);\n            }\n\n            if (\n                this.scroll &&\n                container.clientWidth < this.wrapper.scrollWidth\n            ) {\n                // Triggering edgescroll from within edgeScrollWidth\n                if (drag) {\n                    let x = e.clientX;\n\n                    // Check direction\n                    if (x < wrapperRect.left + this.edgeScrollWidth) {\n                        scrollDirection = -1;\n                    } else if (x > wrapperRect.right - this.edgeScrollWidth) {\n                        scrollDirection = 1;\n                    } else {\n                        scrollDirection = null;\n                    }\n                } else {\n                    let x = e.clientX;\n\n                    // Check direction\n                    if (x < wrapperRect.left + this.edgeScrollWidth) {\n                        scrollDirection = -1;\n                    } else if (x > wrapperRect.right - this.edgeScrollWidth) {\n                        scrollDirection = 1;\n                    } else {\n                        scrollDirection = null;\n                    }\n                }\n\n                if (scrollDirection) {\n                    edgeScroll(e);\n                }\n            }\n        };\n\n        this.element.addEventListener('mousedown', onDown);\n        this.element.addEventListener('touchstart', onDown);\n\n        document.body.addEventListener('mousemove', onMove);\n        document.body.addEventListener('touchmove', onMove);\n\n        document.body.addEventListener('mouseup', onUp);\n        document.body.addEventListener('touchend', onUp);\n\n        this.on('remove', () => {\n            document.body.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n            document.body.removeEventListener('mousemove', onMove);\n            document.body.removeEventListener('touchmove', onMove);\n        });\n\n        this.wavesurfer.on('destroy', () => {\n            document.body.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n        });\n    }\n\n    onDrag(delta) {\n        const maxEnd = this.wavesurfer.getDuration();\n        if (this.end + delta > maxEnd) {\n            delta = maxEnd - this.end;\n        }\n\n        if (this.start + delta < 0) {\n            delta = this.start * -1;\n        }\n\n        this.update({\n            start: this.start + delta,\n            end: this.end + delta\n        });\n    }\n\n    /**\n     * @example\n     * onResize(-5, 'start') // Moves the start point 5 seconds back\n     * onResize(0.5, 'end') // Moves the end point 0.5 seconds forward\n     *\n     * @param {number} delta How much to add or subtract, given in seconds\n     * @param {string} direction 'start 'or 'end'\n     */\n    onResize(delta, direction) {\n        const duration = this.wavesurfer.getDuration();\n        if (direction === 'start') {\n            // Check if changing the start by the given delta would result in the region being smaller than minLength\n            // Ignore cases where we are making the region wider rather than shrinking it\n            if (delta > 0 && this.end - (this.start + delta) < this.minLength) {\n                delta = this.end - this.minLength - this.start;\n            }\n\n            if (delta < 0 && (this.start + delta) < 0) {\n                delta = this.start * -1;\n            }\n\n            this.update({\n                start: Math.min(this.start + delta, this.end),\n                end: Math.max(this.start + delta, this.end)\n            });\n        } else {\n            // Check if changing the end by the given delta would result in the region being smaller than minLength\n            // Ignore cases where we are making the region wider rather than shrinking it\n            if (delta < 0 && this.end + delta - this.start < this.minLength) {\n                delta = this.start + this.minLength - this.end;\n            }\n\n            if (delta > 0 && (this.end + delta) > duration) {\n                delta = duration - this.end;\n            }\n\n            this.update({\n                start: Math.min(this.end + delta, this.start),\n                end: Math.max(this.end + delta, this.start)\n            });\n        }\n    }\n\n    updateHandlesResize(resize) {\n        const cursorStyle = resize ? 'col-resize' : 'auto';\n\n        this.handleLeftEl && this.style(this.handleLeftEl, { cursor: cursorStyle });\n        this.handleRightEl && this.style(this.handleRightEl, { cursor: cursorStyle });\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(23);\n"],"sourceRoot":""}